from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, PyMongoError
from bson import ObjectId
import sys

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
MONGODB_URL = "mongodb://localhost:27017/"
DATABASE_NAME = "cats_database"
COLLECTION_NAME = "cats"

class CatsDatabase:
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB"""
        try:
            self.client = MongoClient(MONGODB_URL)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            self.client.admin.command('ping')
            self.db = self.client[DATABASE_NAME]
            self.collection = self.db[COLLECTION_NAME]
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        except ConnectionFailure as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
            print("   –ó–∞–ø—É—Å—Ç—ñ—Ç—å MongoDB: mongod --dbpath ~/data/db")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            sys.exit(1)

    def create_sample_data(self):
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ—Ç—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –¥–∞–Ω—ñ
            if self.collection.count_documents({}) == 0:
                sample_cats = [
                    {
                        "name": "barsik",
                        "age": 3,
                        "features": ["—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–ø—Ü—ñ", "–¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "—Ä—É–¥–∏–π"]
                    },
                    {
                        "name": "murka",
                        "age": 2,
                        "features": ["–ø–æ–ª—é—î –Ω–∞ –º–∏—à–µ–π", "–ª—é–±–∏—Ç—å —Ä–∏–±—É", "—Å—ñ—Ä–∞"]
                    },
                    {
                        "name": "felix",
                        "age": 5,
                        "features": ["—Å–ø–∏—Ç—å –≤–µ—Å—å –¥–µ–Ω—å", "–ª—é–±–∏—Ç—å –º–æ–ª–æ–∫–æ", "—á–æ—Ä–Ω–∏–π"]
                    },
                    {
                        "name": "fluffy",
                        "age": 1,
                        "features": ["–¥—É–∂–µ –ø—É—Ö–Ω–∞—Å—Ç–∏–π", "–≥—Ä–∞—î—Ç—å—Å—è –∑ –∫–ª—É–±–∫–æ–º", "–±—ñ–ª–∏–π"]
                    }
                ]
                
                result = self.collection.insert_many(sample_cats)
                print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(result.inserted_ids)} –∫–æ—Ç—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            else:
                print("‚ÑπÔ∏è  –î–∞–Ω—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")

    def read_all_cats(self):
        """–ß–∏—Ç–∞–Ω–Ω—è - –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó"""
        try:
            cats = list(self.collection.find())
            if cats:
                print("\nüìã –í—Å—ñ –∫–æ—Ç–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:")
                print("-" * 40)
                for cat in cats:
                    print(f"ID: {cat['_id']}")
                    print(f"–Ü–º'—è: {cat['name']}")
                    print(f"–í—ñ–∫: {cat['age']}")
                    print(f"–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ: {', '.join(cat['features'])}")
                    print("-" * 40)
            else:
                print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")

    def read_cat_by_name(self, name):
        """–ß–∏—Ç–∞–Ω–Ω—è - –ø–æ—à—É–∫ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º"""
        try:
            cat = self.collection.find_one({"name": name})
            if cat:
                print(f"\nüê± –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ç–∞:")
                print("-" * 40)
                print(f"ID: {cat['_id']}")
                print(f"–Ü–º'—è: {cat['name']}")
                print(f"–í—ñ–∫: {cat['age']}")
                print(f"–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ: {', '.join(cat['features'])}")
                print("-" * 40)
            else:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ç–∞: {e}")

    def update_cat_age(self, name, new_age):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è - –∑–º—ñ–Ω–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º"""
        try:
            result = self.collection.update_one(
                {"name": name},
                {"$set": {"age": new_age}}
            )
            
            if result.matched_count > 0:
                print(f"‚úÖ –í—ñ–∫ –∫–æ—Ç–∞ '{name}' –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_age}")
            else:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–∫—É: {e}")

    def add_cat_feature(self, name, new_feature):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–æ —Å–ø–∏—Å–∫—É features"""
        try:
            result = self.collection.update_one(
                {"name": name},
                {"$addToSet": {"features": new_feature}}  # $addToSet –Ω–µ –¥–æ–¥–∞—î –¥—É–±–ª—ñ–∫–∞—Ç–∏
            )
            
            if result.matched_count > 0:
                if result.modified_count > 0:
                    print(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É '{new_feature}' –¥–ª—è –∫–æ—Ç–∞ '{name}'")
                else:
                    print(f"‚ÑπÔ∏è  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ '{new_feature}' –≤–∂–µ —ñ—Å–Ω—É—î —É –∫–æ—Ç–∞ '{name}'")
            else:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {e}")

    def delete_cat_by_name(self, name):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è - –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º"""
        try:
            result = self.collection.delete_one({"name": name})
            
            if result.deleted_count > 0:
                print(f"‚úÖ –ö–æ—Ç–∞ '{name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            else:
                print(f"üòø –ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")

    def delete_all_cats(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è - –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó"""
        try:
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            confirmation = input("‚ö†Ô∏è  –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤? (yes/no): ").lower()
            
            if confirmation in ['yes', 'y', '—Ç–∞–∫', '—Ç']:
                result = self.collection.delete_many({})
                print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∫–æ—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤: {e}")

    def add_new_cat(self, name, age, features):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ –∫–æ—Ç–∞ –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º
            existing_cat = self.collection.find_one({"name": name})
            if existing_cat:
                print(f"‚ö†Ô∏è  –ö—ñ—Ç –∑ —ñ–º'—è–º '{name}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                return
            
            new_cat = {
                "name": name,
                "age": age,
                "features": features
            }
            
            result = self.collection.insert_one(new_cat)
            print(f"‚úÖ –ù–æ–≤–∏–π –∫—ñ—Ç '{name}' –¥–æ–¥–∞–Ω–∏–π –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ ID: {result.inserted_id}")
        except PyMongoError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞: {e}")

    def close_connection(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB"""
        try:
            self.client.close()
            print("üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –∑–∞–∫—Ä–∏—Ç–æ")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")

def display_menu():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("\n" + "="*50)
    print("üê± –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–¢–ê–ú–ò - MONGODB")
    print("="*50)
    print("1. üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
    print("2. üîç –ó–Ω–∞–π—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º")
    print("3. üéÇ –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞")
    print("4. ‚ûï –î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–æ—Ç—É")
    print("5. ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞")
    print("6. ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º")
    print("7. üí£ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
    print("8. üö™ –í–∏–π—Ç–∏")
    print("="*50)

def get_user_input(prompt, input_type=str):
    """–û—Ç—Ä–∏–º—É—î —Ç–∞ –≤–∞–ª—ñ–¥—É—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    while True:
        try:
            value = input_type(input(prompt))
            return value
        except ValueError:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É {input_type.__name__}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ç–∞–º–∏...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    cats_db = CatsDatabase()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    cats_db.create_sample_data()
    
    try:
        while True:
            display_menu()
            choice = get_user_input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-8): ")
            
            if choice == "1":
                cats_db.read_all_cats()
                
            elif choice == "2":
                name = get_user_input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ").strip()
                if name:
                    cats_db.read_cat_by_name(name)
                else:
                    print("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
                    
            elif choice == "3":
                name = get_user_input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ").strip()
                if name:
                    age = get_user_input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –≤—ñ–∫: ", int)
                    if age >= 0:
                        cats_db.update_cat_age(name, age)
                    else:
                        print("‚ùå –í—ñ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º")
                else:
                    print("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
                    
            elif choice == "4":
                name = get_user_input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ").strip()
                if name:
                    feature = get_user_input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É: ").strip()
                    if feature:
                        cats_db.add_cat_feature(name, feature)
                    else:
                        print("‚ùå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
                else:
                    print("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
                    
            elif choice == "5":
                name = get_user_input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞: ").strip()
                if name:
                    age = get_user_input("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫: ", int)
                    if age >= 0:
                        print("–í–≤–µ–¥—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ—Ç–∞ (—á–µ—Ä–µ–∑ –∫–æ–º—É):")
                        features_input = get_user_input("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ").strip()
                        features = [f.strip() for f in features_input.split(",") if f.strip()]
                        if features:
                            cats_db.add_new_cat(name, age, features)
                        else:
                            print("‚ùå –î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É")
                    else:
                        print("‚ùå –í—ñ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º")
                else:
                    print("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
                    
            elif choice == "6":
                name = get_user_input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ").strip()
                if name:
                    cats_db.delete_cat_by_name(name)
                else:
                    print("‚ùå –Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
                    
            elif choice == "7":
                cats_db.delete_all_cats()
                
            elif choice == "8":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
                
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 8")
                
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —ñ—Ç–µ—Ä–∞—Ü—ñ—î—é
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        cats_db.close_connection()

if __name__ == "__main__":
    main()
