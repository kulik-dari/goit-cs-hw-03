import pg8000

DATABASE_CONFIG = {
    'host': '127.0.0.1',
    'database': 'postgres',
    'user': 'dashakulikova',  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!
    'port': 5432
}

def create_database():
    try:
        conn = pg8000.connect(**DATABASE_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –±–∞–∑–∏
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'task_management'")
        exists = cursor.fetchone()
        
        if not exists:
            cursor.execute("CREATE DATABASE task_management")
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö 'task_management' —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        else:
            print("‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö 'task_management' –≤–∂–µ —ñ—Å–Ω—É—î.")
            
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ë–î: {e}")

def create_tables():
    try:
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ task_management
        config = DATABASE_CONFIG.copy()
        config['database'] = 'task_management'
        
        conn = pg8000.connect(**config)
        cursor = conn.cursor()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                fullname VARCHAR(100) NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—è users —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS status (
                id SERIAL PRIMARY KEY,
                name VARCHAR(50) UNIQUE NOT NULL
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—è status —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS tasks (
                id SERIAL PRIMARY KEY,
                title VARCHAR(100) NOT NULL,
                description TEXT,
                status_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                FOREIGN KEY (status_id) REFERENCES status(id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—è tasks —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏
        cursor.execute("""
            INSERT INTO status (name) VALUES 
            ('new'), ('in progress'), ('completed')
            ON CONFLICT (name) DO NOTHING
        """)
        print("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Å—Ç–∞—Ç—É—Å–∏ –¥–æ–¥–∞–Ω—ñ")
        
        conn.commit()
        conn.close()
        print("üéâ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—å: {e}")

def main():
    print("üèóÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Ç–∞–±–ª–∏—Ü—å...")
    create_database()
    create_tables()
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
